import Jama.*;
import java.util.NoSuchElementException;
import java.util.Random;

public class ConvergenceIterativeMethods {

    public static void main(String[] args) {
        System.out.println("Gauss - Seidel");
        Matrix[] initialVectors = new Matrix[100];
        Random random = new Random();
        double[] positions = new double[3];
        TheResult[] answers = new TheResult[100];
        double[] initialErrors = new double[100];
        double[] steps = new double[100];
        Matrix theAverage = new Matrix(3, 1);
        double[][] exact = {{(double) 9 / 190}, {(double) 28 / 475}, {(double) 33 / 475}};
        Matrix xExact = new Matrix(exact);
        int averageSteps = 0;
        int totalSteps = 0;


        for (int i = 0; i < initialVectors.length; i++) {
            for (int j = 0; j < 3; j++) {
                positions[j] = random.nextDouble();
                if (random.nextBoolean()) {
                    positions[j] *= (double) (-1);
                }
            }
            double[][] thePositions = {{positions[0]}, {positions[1]}, {positions[2]}};
            initialVectors[i] = new Matrix(thePositions);
            System.out.println("Gauss X0: ");
            initialVectors[i].print(4,4);
            Matrix initialError = initialVectors[i].minus(xExact);
            initialErrors[i] = normInfinity(initialError);
            answers[i] = gs_iter(initialVectors[i], .00005, 100);
            System.out.println("Gauss Xn: ");
            answers[i].print(answers[i].getXSolution());
            theAverage.plusEquals(answers[i].getXSolution());
            System.out.println("Gauss iterations: " + answers[i].toString());
            steps[i] = answers[i].getIterations();
            averageSteps += answers[i].getIterations();
            totalSteps += answers[i].getIterations();
        }
        System.out.println("Gauss Average Answer X");
        averageSteps /= (double) (100);
        theAverage.timesEquals(((double) 1 /100));
        theAverage.print(2, 10);
        System.out.println("Gauss Average Steps");
        System.out.println(averageSteps);
        System.out.println("Gauss Total Steps");
        System.out.println(totalSteps);

        Matrix error = theAverage.minus(xExact);
        double theError = normInfinity(error);
        System.out.println("Gauss Error");
        System.out.println(theError);
        // System.out.println("The initial errors");
        // for (int i = 0; i < steps.length; i++) {
        //     System.out.println(initialErrors[i]);
        // }
        //
        // System.out.println("The steps");
        // for (int i = 0; i < steps.length; i++) {
        //     System.out.println(steps[i]);
        // }
        System.out.println("");
        System.out.println("Jacobi ");
        Matrix approxTotal = calculate(initialVectors);
        Matrix actualTotal = new Matrix(3,1);
        actualTotal.set(0, 0, (double) 9 / 190);
        actualTotal.set(1, 0, (double) 28 / 475);
        actualTotal.set(2, 0, (double) 33 / 475);
        System.out.println("");
        iterativeError(approxTotal, actualTotal);
        System.out.println("");
        System.out.println("Jacobi & Gauss Seidel Ratio: " + (averIterations / 100) / averageSteps);
    }

    private static class TheResult {
        Matrix xSolution;
        int iterations;

        public Matrix getXSolution() {
            return xSolution;
        }

        public void setXSolution(Matrix x) {
            xSolution = x;
        }

        public int getIterations() {
            return iterations;
        }

        public void setIterations(int iterations) {
            this.iterations = iterations;
        }

        public void print(Matrix xSolution) {
            xSolution.print(4,4);
        }

        public String toString() {
            return String.valueOf(iterations);
        }
    }

    public static TheResult gs_iter(Matrix x, double tolerance, int maxIterations) {
        TheResult theResult = new TheResult();
        double one = 1;
        double three = 3;

        double[][] lowTriMatrixArr = {{1, 0, 0}, {.5, 1, 0}, {one / three, .25, 1}};
        Matrix lowTriMatrix = new Matrix(lowTriMatrixArr);
        lowTriMatrix = inverseLowerTri(lowTriMatrix);

        double[][] bArr = {{.1}, {.1}, {.1}};
        Matrix b = new Matrix(bArr);

        double[][] uArr = {{0, .5, one / three} ,  {0, 0, .25}, {0, 0, 0}};
        Matrix u = new Matrix(uArr);

        Matrix uTimesx = multiply(u, x);
        Matrix bMinuesuTimesx = b.minus(uTimesx);
        Matrix sol1 = multiply(lowTriMatrix, bMinuesuTimesx);
        Matrix sol2 = new Matrix(3 , 1);


        for (int i = 0; i < maxIterations; i++) {
            uTimesx = multiply(u, sol1);
            bMinuesuTimesx = b.minus(uTimesx);
            sol2 = multiply(lowTriMatrix, bMinuesuTimesx);
            Matrix check = sol2.minus(sol1);
            double checkInfinNorm = normInfinity(check);
            if (checkInfinNorm <= tolerance) {
                theResult.setXSolution(sol2);
                theResult.setIterations(i + 1);
                return theResult;
            } else {
                sol1 = sol2;
            }
        }

        return null;
    }


    public static Matrix inverseLowerTri(Matrix lowTriMatrix) {
        double[][] theMatrix = lowTriMatrix.getArrayCopy();
        double[][] theMatrixcopy = lowTriMatrix.getArrayCopy();
        for (int i = 0; i < theMatrix.length; i++) {
            for (int j = 0; j < theMatrix[i].length; j++) {
                if ((i == 0 && j == 0) || (i == 1 && j == 1) || (i == 2 && j == 2)) {
                    theMatrix[i][j] = (double) 1 / theMatrixcopy[i][j];
                }
                if (i == 1 && j == 0) {
                    theMatrix[i][j] = ((double) (-1) * theMatrixcopy[i][j]) / (theMatrixcopy[0][0] * theMatrixcopy[1][1]);
                }
                if (i == 2 && j == 0) {
                    theMatrix[i][j] = ((double) (-1) * theMatrixcopy[1][1] * theMatrixcopy[i][j] + theMatrixcopy[1][0] * theMatrixcopy[2][1]) /
                        (theMatrixcopy[0][0] * theMatrixcopy[1][1] * theMatrixcopy[2][2]);
                }
                if (i == 2 && j == 1) {
                    theMatrix[i][j] = ((-1) * theMatrixcopy[i][j]) / (theMatrixcopy[1][1] * theMatrixcopy[2][2]);
                }
            }
        }
        return lowTriMatrix.constructWithCopy(theMatrix);
    }

    private static Matrix xApprox;
    private static int averIterations;

    public static Matrix jacobi_iter(Matrix xk, double tolerance, int maxIterations) {
        boolean toContinue = true;
        int iterations = 0;
        Matrix a = new Matrix(3, 3);
        a.set(0, 0, 1);
        a.set(1, 0, (double) 1 / 2);
        a.set(2, 0, (double) 1 / 3);
        a.set(0, 1, (double) 1 / 2);
        a.set(1, 1, 1);
        a.set(2, 1, (double) 1 / 4);
        a.set(0, 2, (double) 1 / 3);
        a.set(1, 2, (double) 1 / 4);
        a.set(2, 2, 1);
        Matrix c = new Matrix(3, 1);
        c.set(0, 0, 0.1);
        c.set(1, 0, 0.1);
        c.set(2, 0, 0.1);
        Matrix l = new Matrix(3, 3);
        Matrix d = new Matrix(3, 3);
        Matrix u = new Matrix(3 ,3);
        Matrix current = xk;
        for (int x = 0; x < 3; x++) {
            for (int y = 0; y < 3; y++) {
                if (x < y) {
                    l.set(y, x, a.get(y, x));
                } else if (x == y) {
                    d.set(y, x, a.get(y, x));
                } else if (x > y){
                    u.set(y, x, a.get(y, x));
                }
            }
        }
        System.out.print("Jacobi X0:");
        current.print(8,8);
        while (toContinue && iterations < maxIterations) {
            d = inverseDiag(d);
            Matrix t = multiply(d, (l.plus(u)).uminus());
            Matrix previous = current;
            current = multiply(t, current).plus(c);
            iterations++;
            if (normInfinity(current.minus(previous)) < tolerance) {
                toContinue = false;
            }
        }
        if (iterations == maxIterations) {
            throw new NoSuchElementException("Cannot find an accurate solution.");
        }
        xApprox = current;
        System.out.print("Jacobi XApprox: ");
        xApprox.print(8,8);
        System.out.println("Jacobi Iterations: " + iterations);
        averIterations += iterations;
        return xApprox;
    }

    public static Matrix calculate(Matrix[] initialVectors) {
        // Random randNum = new Random();
        Matrix approxTotal = new Matrix(3,1);
        for (int count = 0; count < 100; count++) {
            Matrix random = initialVectors[count];
            // for (int i = 0; i < 3; i++) {
            //     random.set(i, 0, randNum.nextDouble() - randNum.nextDouble());
            // }
            approxTotal.plus(jacobi_iter(random, 0.00005, 100));
        }
        return approxTotal;
    }

    public static void iterativeError(Matrix approx, Matrix actual) {
        approx.timesEquals((double) 1 / 100);
        approx.minusEquals(actual);
        double norm = normInfinity(approx);
        System.out.println("Jacobi Iterative Error: " + norm);
    }

    public static Matrix inverseDiag(Matrix a) {
        int x = 0;
        int y = 0;
        while (x < 3) {
            a.set(y, x, 1 / a.get(y, x));
            x++;
            y++;
        }
        return a;
    }

    public static double normInfinity(Matrix m) {
        double[] ans = new double[m.getRowDimension()];
        for(int i = 0; i < ans.length; i++) {
            for(int j = 0; j < m.getColumnDimension(); j++) {
                ans[i]+= Math.abs(m.get(i, j));
            }
        }
        double answer = ans[0];
        for(int i = 1; i < ans.length; i++) {
            if(ans[i] > answer){
                answer = ans[i];
            }
        }
        return answer;
    }

    public static Matrix multiply(Matrix a, Matrix b) {
        if (a.getColumnDimension() == b.getRowDimension()) {
            Matrix ans = new Matrix(a.getRowDimension(), b.getColumnDimension());
            for (int i = 0; i < ans.getRowDimension(); i++) {
                for (int j = 0; j < ans.getColumnDimension(); j++) {
                    for (int k = 0; k < a.getColumnDimension(); k++) {
                        ans.set(i, j, ans.get(i, j) + (a.get(i, k) * b.get(k, j)));
                    }
                }
            }
            return ans;
        } else {
            return null;
        }
    }
}
